// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'model/category.dart';
import 'model/products.dart';
import 'model/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 1755388395224074276),
      name: 'User',
      lastPropertyId: const IdUid(10, 1819689200144598835),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5616583560322746149),
            name: 'userID',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 6476017362766792001)),
        ModelProperty(
            id: const IdUid(2, 5666421421269216929),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 833669781507191727),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8683178832145541436),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3673235797466487800),
            name: 'fname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1327688660122397798),
            name: 'lname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 9000778547250327128),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1819689200144598835),
            name: 'uid',
            type: 6,
            flags: 129)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 7187338455050805458),
      name: 'Category',
      lastPropertyId: const IdUid(3, 474141437124168385),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1699400926772092194),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 5776092436057899631),
            name: 'categoryId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(4, 564446221027492873)),
        ModelProperty(
            id: const IdUid(3, 474141437124168385),
            name: 'categoryName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'product', srcEntity: 'Product', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(5, 2409890910820290082),
      name: 'Product',
      lastPropertyId: const IdUid(7, 2941225911205876750),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7738327543202863556),
            name: 'pid',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 6969132237805402499),
            name: 'productId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(7, 2486577352657672029)),
        ModelProperty(
            id: const IdUid(3, 4158691007582086077),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2099848522967433553),
            name: 'price',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1881896969669490870),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8020643484745579237),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2941225911205876750),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 1643472555128223838),
            relationTarget: 'Category')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(5, 2409890910820290082),
      lastIndexId: const IdUid(8, 1643472555128223838),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [7858566292440967577, 7955010377942542426],
      retiredIndexUids: const [634105571500668049],
      retiredPropertyUids: const [
        5916701203717393757,
        3475012209060386923,
        2706250535870486305,
        4844401363494620432,
        4723195987362991362,
        4695482223483438098,
        9005776117116850444,
        4421607327266596891,
        2372635048226451676,
        2756160670834519709,
        3912550364986977620,
        3525624406916190144,
        6510021609888275028
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    User: EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.uid,
        setId: (User object, int id) {
          object.uid = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final userIDOffset =
              object.userID == null ? null : fbb.writeString(object.userID!);
          final usernameOffset = object.username == null
              ? null
              : fbb.writeString(object.username!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final fnameOffset =
              object.fname == null ? null : fbb.writeString(object.fname!);
          final lnameOffset =
              object.lname == null ? null : fbb.writeString(object.lname!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          fbb.startTable(11);
          fbb.addOffset(0, userIDOffset);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.addOffset(6, fnameOffset);
          fbb.addOffset(7, lnameOffset);
          fbb.addOffset(8, imageOffset);
          fbb.addInt64(9, object.uid);
          fbb.finish(fbb.endTable());
          return object.uid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              uid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0),
              userID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 4),
              fname: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              lname: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8));

          return object;
        }),
    Category: EntityDefinition<Category>(
        model: _entities[1],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {
              RelInfo<Product>.toOneBacklink(
                      7, object.id, (Product srcObject) => srcObject.category):
                  object.product
            },
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final categoryIdOffset = object.categoryId == null
              ? null
              : fbb.writeString(object.categoryId!);
          final categoryNameOffset = object.categoryName == null
              ? null
              : fbb.writeString(object.categoryName!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, categoryIdOffset);
          fbb.addOffset(2, categoryNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Category(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          InternalToManyAccess.setRelInfo(
              object.product,
              store,
              RelInfo<Product>.toOneBacklink(
                  7, object.id, (Product srcObject) => srcObject.category),
              store.box<Category>());
          return object;
        }),
    Product: EntityDefinition<Product>(
        model: _entities[2],
        toOneRelations: (Product object) => [object.category],
        toManyRelations: (Product object) => {},
        getId: (Product object) => object.pid,
        setId: (Product object, int id) {
          object.pid = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final productIdOffset = object.productId == null
              ? null
              : fbb.writeString(object.productId!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final priceOffset =
              object.price == null ? null : fbb.writeString(object.price!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(8);
          fbb.addInt64(0, object.pid);
          fbb.addOffset(1, productIdOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, priceOffset);
          fbb.addOffset(4, imageOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addInt64(6, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.pid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Product(
              productId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              price: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              pid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.category.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.userID]
  static final userID = QueryStringProperty<User>(_entities[0].properties[0]);

  /// see [User.username]
  static final username = QueryStringProperty<User>(_entities[0].properties[1]);

  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[0].properties[2]);

  /// see [User.password]
  static final password = QueryStringProperty<User>(_entities[0].properties[3]);

  /// see [User.fname]
  static final fname = QueryStringProperty<User>(_entities[0].properties[4]);

  /// see [User.lname]
  static final lname = QueryStringProperty<User>(_entities[0].properties[5]);

  /// see [User.image]
  static final image = QueryStringProperty<User>(_entities[0].properties[6]);

  /// see [User.uid]
  static final uid = QueryIntegerProperty<User>(_entities[0].properties[7]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// see [Category.id]
  static final id = QueryIntegerProperty<Category>(_entities[1].properties[0]);

  /// see [Category.categoryId]
  static final categoryId =
      QueryStringProperty<Category>(_entities[1].properties[1]);

  /// see [Category.categoryName]
  static final categoryName =
      QueryStringProperty<Category>(_entities[1].properties[2]);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// see [Product.pid]
  static final pid = QueryIntegerProperty<Product>(_entities[2].properties[0]);

  /// see [Product.productId]
  static final productId =
      QueryStringProperty<Product>(_entities[2].properties[1]);

  /// see [Product.name]
  static final name = QueryStringProperty<Product>(_entities[2].properties[2]);

  /// see [Product.price]
  static final price = QueryStringProperty<Product>(_entities[2].properties[3]);

  /// see [Product.image]
  static final image = QueryStringProperty<Product>(_entities[2].properties[4]);

  /// see [Product.description]
  static final description =
      QueryStringProperty<Product>(_entities[2].properties[5]);

  /// see [Product.category]
  static final category =
      QueryRelationToOne<Product, Category>(_entities[2].properties[6]);
}
